syntax = "proto3";
package chatMsg;

enum MsgContentType {
    MsgContentTypeErr = 0;
    Text = 1;
    Img = 2;
    Video = 3;
}

enum MsgType {
    MsgTypeErr = 0;
    Single = 1;
    Group = 2;
}

message Ack {
    string md5 = 1;
}

message Msg {
    string from = 1;
    string target = 2;
    bytes content = 3;
    MsgType msgType = 4;
    MsgContentType msgContentType = 5;
    string sendTime = 6;
    // group chat usage.
    string groupName = 7;
    bool spread = 8;
}

message MsgPack {
    repeated Msg msgList = 1;
}

message PullReq {
    string from = 1;
}

message KeepAlive {
    string checkAlive = 1;
}

message GroupReq {
    string uid          = 1;
    string groupName    = 2;
    bool   isCopy       = 3;
}

message GroupRsp {
    string msg          = 1;
}

// the server for all operators after user login successfully
service MsgCynic {
    // Send Msg To Server
    rpc SendTo(Msg) returns (Ack);
    // pull myself message from Server
    rpc Pull(PullReq) returns (MsgPack);
    // pull all message from cluster
    rpc PullAll(PullReq) returns (MsgPack);
    // check if this Keeper is alive or not
    rpc CheckAlive(KeepAlive) returns (KeepAlive);
    // notify keeper to sync cluster message
    rpc SyncLocationNotify(KeepAlive) returns (KeepAlive);

    // group operator.

    // join into a group
    rpc JoinGroup(GroupReq) returns (GroupRsp);
    // Leave from a group
    rpc LeaveGroup(GroupReq) returns (GroupRsp);
    // Create a group
    rpc CreateGroup(GroupReq) returns (GroupRsp);
    // Delete a group
    rpc DeleteGroup(GroupReq) returns (GroupRsp);
}